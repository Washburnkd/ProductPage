
@{
    ViewData["Title"] = "ie";
}

<h1>ie</h1>

<style>
    .item {
        height: 50px;
        width: 50px;
        position: absolute;
        background: orange;
    }

    .scale {
        position: absolute;
        width: 10px;
        height: 10px;
        border-radius: 5px;
        background-color: dodgerblue;
        z-index: 2;
    }

        .scale.nw {
            top: -1px;
            left: -1px;
            cursor: nw-resize;
        }
        .scale.ne {
            top: -1px;
            right: -1px;
            cursor: ne-resize;
        }
        .scale.sw {
            bottom: -1px;
            left: -1px;
            cursor: sw-resize;
        }
        .scale.se {
            bottom: -1px;
            right: -1px;
            cursor: se-resize;
        }

</style>

<div class="item">
    <div class="scale ne"></div>
    <div class="scale nw"></div>
    <div class="scale se"></div>
    <div class="scale sw"></div>
</div>

<script>

    const el = document.querySelector(".item");

    let isResizing = false;

    el.addEventListener("mousedown", mousedown);

    function mousedown(e) {
        window.addEventListener("mousemove", mousemove);
        window.addEventListener('mouseup', mouseup);

        let prevX = e.clientX;
        let prevY = e.clientY;


        function mousemove(e) {
            if (!isResizing) {

                let newX = prevX - e.clientX;
                let newY = prevY - e.clientY;

                const rect = el.getBoundingClientRect();

                el.style.left = rect.left - newX + "px";
                el.style.top = rect.top - newY + "px";

                prevX = e.clientX;
                prevY = e.clientY;
            }
        }

        function mouseup() {
            window.removeEventListener("mousemove", mousemove);
            window.removeEventListener('mouseup', mouseup);
        }
    }

    const scaletool = document.querySelectorAll('.scale');

    let currentscale;

    for (let scale of scaletool) {
        scale.addEventListener("mousedown", mousedown);

        function mousedown(e) {
            currentscale = e.target;
            isResizing = true;

            let prevX = e.clientX;
            let prevY = e.clientY;

            window.addEventListener("mousemove", mousemove);
            window.addEventListener("mouseup", mouseup);

            function mousemove(e) {
                const rect = el.getBoundingClientRect();

                if (currentscale.classList.contains("se")) {
                    el.style.width = rect.width - (prevX - e.clientX) + "px";
                    el.style.height = rect.height - (prevY - e.clientY) + "px";
                } else if (currentscale.classList.contains("sw")) {
                    el.style.width = rect.width + (prevX - e.clientX) + "px";
                    el.style.height = rect.height - (prevY - e.clientY) + "px";
                    el.style.left = rect.left - (prevX - e.clientX) + "px";
                } else if (currentscale.classList.contains("ne")) {
                    el.style.width = rect.width - (prevX - e.clientX) + "px";
                    el.style.height = rect.height + (prevY - e.clientY) + "px";
                    el.style.top = rect.top - (prevY - e.clientY) + "px";
                } else {
                    el.style.width = rect.width + (prevX - e.clientX) + "px";
                    el.style.height = rect.height + (prevY - e.clientY) + "px";
                    el.style.top = rect.top - (prevY - e.clientY) + "px";
                    el.style.left = rect.left - (prevX - e.clientX) + "px";
                }

                prevX = e.clientX;
                prevY = e.clientY;
            }

            function mouseup() {
                window.removeEventListener("mousemove", mousemove);
                window.removeEventListener("mouseup", mouseup);
                isResizing = false;
            }
        }
    }

</script>
